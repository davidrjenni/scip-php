<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: scip.proto

namespace Scip\SymbolInformation;

use UnexpectedValueException;

/**
 * (optional) Kind represents the fine-grained category of a symbol, suitable for presenting
 * information about the symbol's meaning in the language.
 * For example:
 * - A Java method would have the kind `Method` while a Go function would
 *   have the kind `Function`, even if the symbols for these use the same
 *   syntax for the descriptor `SymbolDescriptor.Suffix.Method`.
 * - A Go struct has the symbol kind `Struct` while a Java class has
 *   the symbol kind `Class` even if they both have the same descriptor:
 *   `SymbolDescriptor.Suffix.Type`.
 * Since Kind is more fine-grained than Suffix:
 * - If two symbols have the same Kind, they should share the same Suffix.
 * - If two symbols have different Suffixes, they should have different Kinds.
 *
 * Protobuf type <code>scip.SymbolInformation.Kind</code>
 */
class Kind
{
    /**
     * Generated from protobuf enum <code>UnspecifiedKind = 0;</code>
     */
    const UnspecifiedKind = 0;
    /**
     * A method which may or may not have a body. For Java, Kotlin etc.
     *
     * Generated from protobuf enum <code>AbstractMethod = 66;</code>
     */
    const AbstractMethod = 66;
    /**
     * For Ruby's attr_accessor
     *
     * Generated from protobuf enum <code>Accessor = 72;</code>
     */
    const Accessor = 72;
    /**
     * Generated from protobuf enum <code>Array = 1;</code>
     */
    const PBArray = 1;
    /**
     * For Alloy
     *
     * Generated from protobuf enum <code>Assertion = 2;</code>
     */
    const Assertion = 2;
    /**
     * Generated from protobuf enum <code>AssociatedType = 3;</code>
     */
    const AssociatedType = 3;
    /**
     * For C++
     *
     * Generated from protobuf enum <code>Attribute = 4;</code>
     */
    const Attribute = 4;
    /**
     * For Lean
     *
     * Generated from protobuf enum <code>Axiom = 5;</code>
     */
    const Axiom = 5;
    /**
     * Generated from protobuf enum <code>Boolean = 6;</code>
     */
    const Boolean = 6;
    /**
     * Generated from protobuf enum <code>Class = 7;</code>
     */
    const PBClass = 7;
    /**
     * Generated from protobuf enum <code>Constant = 8;</code>
     */
    const Constant = 8;
    /**
     * Generated from protobuf enum <code>Constructor = 9;</code>
     */
    const Constructor = 9;
    /**
     * For Solidity
     *
     * Generated from protobuf enum <code>Contract = 62;</code>
     */
    const Contract = 62;
    /**
     * For Haskell
     *
     * Generated from protobuf enum <code>DataFamily = 10;</code>
     */
    const DataFamily = 10;
    /**
     * For C# and F#
     *
     * Generated from protobuf enum <code>Delegate = 73;</code>
     */
    const Delegate = 73;
    /**
     * Generated from protobuf enum <code>Enum = 11;</code>
     */
    const Enum = 11;
    /**
     * Generated from protobuf enum <code>EnumMember = 12;</code>
     */
    const EnumMember = 12;
    /**
     * Generated from protobuf enum <code>Error = 63;</code>
     */
    const Error = 63;
    /**
     * Generated from protobuf enum <code>Event = 13;</code>
     */
    const Event = 13;
    /**
     * For Dart
     *
     * Generated from protobuf enum <code>Extension = 84;</code>
     */
    const Extension = 84;
    /**
     * For Alloy
     *
     * Generated from protobuf enum <code>Fact = 14;</code>
     */
    const Fact = 14;
    /**
     * Generated from protobuf enum <code>Field = 15;</code>
     */
    const Field = 15;
    /**
     * Generated from protobuf enum <code>File = 16;</code>
     */
    const File = 16;
    /**
     * Generated from protobuf enum <code>Function = 17;</code>
     */
    const PBFunction = 17;
    /**
     * For 'get' in Swift, 'attr_reader' in Ruby
     *
     * Generated from protobuf enum <code>Getter = 18;</code>
     */
    const Getter = 18;
    /**
     * For Raku
     *
     * Generated from protobuf enum <code>Grammar = 19;</code>
     */
    const Grammar = 19;
    /**
     * For Purescript and Lean
     *
     * Generated from protobuf enum <code>Instance = 20;</code>
     */
    const Instance = 20;
    /**
     * Generated from protobuf enum <code>Interface = 21;</code>
     */
    const PBInterface = 21;
    /**
     * Generated from protobuf enum <code>Key = 22;</code>
     */
    const Key = 22;
    /**
     * For Racket
     *
     * Generated from protobuf enum <code>Lang = 23;</code>
     */
    const Lang = 23;
    /**
     * For Lean
     *
     * Generated from protobuf enum <code>Lemma = 24;</code>
     */
    const Lemma = 24;
    /**
     * For solidity
     *
     * Generated from protobuf enum <code>Library = 64;</code>
     */
    const Library = 64;
    /**
     * Generated from protobuf enum <code>Macro = 25;</code>
     */
    const Macro = 25;
    /**
     * Generated from protobuf enum <code>Method = 26;</code>
     */
    const Method = 26;
    /**
     * For Ruby
     *
     * Generated from protobuf enum <code>MethodAlias = 74;</code>
     */
    const MethodAlias = 74;
    /**
     * Analogous to 'ThisParameter' and 'SelfParameter', but for languages
     * like Go where the receiver doesn't have a conventional name.
     *
     * Generated from protobuf enum <code>MethodReceiver = 27;</code>
     */
    const MethodReceiver = 27;
    /**
     * Analogous to 'AbstractMethod', for Go.
     *
     * Generated from protobuf enum <code>MethodSpecification = 67;</code>
     */
    const MethodSpecification = 67;
    /**
     * For Protobuf
     *
     * Generated from protobuf enum <code>Message = 28;</code>
     */
    const Message = 28;
    /**
     * For Dart
     *
     * Generated from protobuf enum <code>Mixin = 85;</code>
     */
    const Mixin = 85;
    /**
     * For Solidity
     *
     * Generated from protobuf enum <code>Modifier = 65;</code>
     */
    const Modifier = 65;
    /**
     * Generated from protobuf enum <code>Module = 29;</code>
     */
    const Module = 29;
    /**
     * Generated from protobuf enum <code>Namespace = 30;</code>
     */
    const PBNamespace = 30;
    /**
     * Generated from protobuf enum <code>Null = 31;</code>
     */
    const Null = 31;
    /**
     * Generated from protobuf enum <code>Number = 32;</code>
     */
    const Number = 32;
    /**
     * Generated from protobuf enum <code>Object = 33;</code>
     */
    const Object = 33;
    /**
     * Generated from protobuf enum <code>Operator = 34;</code>
     */
    const Operator = 34;
    /**
     * Generated from protobuf enum <code>Package = 35;</code>
     */
    const Package = 35;
    /**
     * Generated from protobuf enum <code>PackageObject = 36;</code>
     */
    const PackageObject = 36;
    /**
     * Generated from protobuf enum <code>Parameter = 37;</code>
     */
    const Parameter = 37;
    /**
     * Generated from protobuf enum <code>ParameterLabel = 38;</code>
     */
    const ParameterLabel = 38;
    /**
     * For Haskell's PatternSynonyms
     *
     * Generated from protobuf enum <code>Pattern = 39;</code>
     */
    const Pattern = 39;
    /**
     * For Alloy
     *
     * Generated from protobuf enum <code>Predicate = 40;</code>
     */
    const Predicate = 40;
    /**
     * Generated from protobuf enum <code>Property = 41;</code>
     */
    const Property = 41;
    /**
     * Analogous to 'Trait' and 'TypeClass', for Swift and Objective-C
     *
     * Generated from protobuf enum <code>Protocol = 42;</code>
     */
    const Protocol = 42;
    /**
     * Analogous to 'AbstractMethod', for Swift and Objective-C.
     *
     * Generated from protobuf enum <code>ProtocolMethod = 68;</code>
     */
    const ProtocolMethod = 68;
    /**
     * Analogous to 'AbstractMethod', for C++.
     *
     * Generated from protobuf enum <code>PureVirtualMethod = 69;</code>
     */
    const PureVirtualMethod = 69;
    /**
     * For Haskell
     *
     * Generated from protobuf enum <code>Quasiquoter = 43;</code>
     */
    const Quasiquoter = 43;
    /**
     * 'self' in Python, Rust, Swift etc.
     *
     * Generated from protobuf enum <code>SelfParameter = 44;</code>
     */
    const SelfParameter = 44;
    /**
     * For 'set' in Swift, 'attr_writer' in Ruby
     *
     * Generated from protobuf enum <code>Setter = 45;</code>
     */
    const Setter = 45;
    /**
     * For Alloy, analogous to 'Struct'.
     *
     * Generated from protobuf enum <code>Signature = 46;</code>
     */
    const Signature = 46;
    /**
     * For Ruby
     *
     * Generated from protobuf enum <code>SingletonClass = 75;</code>
     */
    const SingletonClass = 75;
    /**
     * Analogous to 'StaticMethod', for Ruby.
     *
     * Generated from protobuf enum <code>SingletonMethod = 76;</code>
     */
    const SingletonMethod = 76;
    /**
     * Analogous to 'StaticField', for C++
     *
     * Generated from protobuf enum <code>StaticDataMember = 77;</code>
     */
    const StaticDataMember = 77;
    /**
     * For C#
     *
     * Generated from protobuf enum <code>StaticEvent = 78;</code>
     */
    const StaticEvent = 78;
    /**
     * For C#
     *
     * Generated from protobuf enum <code>StaticField = 79;</code>
     */
    const StaticField = 79;
    /**
     * For Java, C#, C++ etc.
     *
     * Generated from protobuf enum <code>StaticMethod = 80;</code>
     */
    const StaticMethod = 80;
    /**
     * For C#, TypeScript etc.
     *
     * Generated from protobuf enum <code>StaticProperty = 81;</code>
     */
    const StaticProperty = 81;
    /**
     * For C, C++
     *
     * Generated from protobuf enum <code>StaticVariable = 82;</code>
     */
    const StaticVariable = 82;
    /**
     * Generated from protobuf enum <code>String = 48;</code>
     */
    const String = 48;
    /**
     * Generated from protobuf enum <code>Struct = 49;</code>
     */
    const Struct = 49;
    /**
     * For Swift
     *
     * Generated from protobuf enum <code>Subscript = 47;</code>
     */
    const Subscript = 47;
    /**
     * For Lean
     *
     * Generated from protobuf enum <code>Tactic = 50;</code>
     */
    const Tactic = 50;
    /**
     * For Lean
     *
     * Generated from protobuf enum <code>Theorem = 51;</code>
     */
    const Theorem = 51;
    /**
     * Method receiver for languages
     * 'this' in JavaScript, C++, Java etc.
     *
     * Generated from protobuf enum <code>ThisParameter = 52;</code>
     */
    const ThisParameter = 52;
    /**
     * Analogous to 'Protocol' and 'TypeClass', for Rust, Scala etc.
     *
     * Generated from protobuf enum <code>Trait = 53;</code>
     */
    const PBTrait = 53;
    /**
     * Analogous to 'AbstractMethod', for Rust, Scala etc.
     *
     * Generated from protobuf enum <code>TraitMethod = 70;</code>
     */
    const TraitMethod = 70;
    /**
     * Data type definition for languages like OCaml which use `type`
     * rather than separate keywords like `struct` and `enum`.
     *
     * Generated from protobuf enum <code>Type = 54;</code>
     */
    const Type = 54;
    /**
     * Generated from protobuf enum <code>TypeAlias = 55;</code>
     */
    const TypeAlias = 55;
    /**
     * Analogous to 'Trait' and 'Protocol', for Haskell, Purescript etc.
     *
     * Generated from protobuf enum <code>TypeClass = 56;</code>
     */
    const TypeClass = 56;
    /**
     * Analogous to 'AbstractMethod', for Haskell, Purescript etc.
     *
     * Generated from protobuf enum <code>TypeClassMethod = 71;</code>
     */
    const TypeClassMethod = 71;
    /**
     * For Haskell
     *
     * Generated from protobuf enum <code>TypeFamily = 57;</code>
     */
    const TypeFamily = 57;
    /**
     * Generated from protobuf enum <code>TypeParameter = 58;</code>
     */
    const TypeParameter = 58;
    /**
     * For C, C++, Capn Proto
     *
     * Generated from protobuf enum <code>Union = 59;</code>
     */
    const Union = 59;
    /**
     * Generated from protobuf enum <code>Value = 60;</code>
     */
    const Value = 60;
    /**
     * Next = 86;
     * Feel free to open a PR proposing new language-specific kinds.
     *
     * Generated from protobuf enum <code>Variable = 61;</code>
     */
    const Variable = 61;

    private static $valueToName = [
        self::UnspecifiedKind => 'UnspecifiedKind',
        self::AbstractMethod => 'AbstractMethod',
        self::Accessor => 'Accessor',
        self::PBArray => 'Array',
        self::Assertion => 'Assertion',
        self::AssociatedType => 'AssociatedType',
        self::Attribute => 'Attribute',
        self::Axiom => 'Axiom',
        self::Boolean => 'Boolean',
        self::PBClass => 'Class',
        self::Constant => 'Constant',
        self::Constructor => 'Constructor',
        self::Contract => 'Contract',
        self::DataFamily => 'DataFamily',
        self::Delegate => 'Delegate',
        self::Enum => 'Enum',
        self::EnumMember => 'EnumMember',
        self::Error => 'Error',
        self::Event => 'Event',
        self::Extension => 'Extension',
        self::Fact => 'Fact',
        self::Field => 'Field',
        self::File => 'File',
        self::PBFunction => 'Function',
        self::Getter => 'Getter',
        self::Grammar => 'Grammar',
        self::Instance => 'Instance',
        self::PBInterface => 'Interface',
        self::Key => 'Key',
        self::Lang => 'Lang',
        self::Lemma => 'Lemma',
        self::Library => 'Library',
        self::Macro => 'Macro',
        self::Method => 'Method',
        self::MethodAlias => 'MethodAlias',
        self::MethodReceiver => 'MethodReceiver',
        self::MethodSpecification => 'MethodSpecification',
        self::Message => 'Message',
        self::Mixin => 'Mixin',
        self::Modifier => 'Modifier',
        self::Module => 'Module',
        self::PBNamespace => 'Namespace',
        self::Null => 'Null',
        self::Number => 'Number',
        self::Object => 'Object',
        self::Operator => 'Operator',
        self::Package => 'Package',
        self::PackageObject => 'PackageObject',
        self::Parameter => 'Parameter',
        self::ParameterLabel => 'ParameterLabel',
        self::Pattern => 'Pattern',
        self::Predicate => 'Predicate',
        self::Property => 'Property',
        self::Protocol => 'Protocol',
        self::ProtocolMethod => 'ProtocolMethod',
        self::PureVirtualMethod => 'PureVirtualMethod',
        self::Quasiquoter => 'Quasiquoter',
        self::SelfParameter => 'SelfParameter',
        self::Setter => 'Setter',
        self::Signature => 'Signature',
        self::SingletonClass => 'SingletonClass',
        self::SingletonMethod => 'SingletonMethod',
        self::StaticDataMember => 'StaticDataMember',
        self::StaticEvent => 'StaticEvent',
        self::StaticField => 'StaticField',
        self::StaticMethod => 'StaticMethod',
        self::StaticProperty => 'StaticProperty',
        self::StaticVariable => 'StaticVariable',
        self::String => 'String',
        self::Struct => 'Struct',
        self::Subscript => 'Subscript',
        self::Tactic => 'Tactic',
        self::Theorem => 'Theorem',
        self::ThisParameter => 'ThisParameter',
        self::PBTrait => 'Trait',
        self::TraitMethod => 'TraitMethod',
        self::Type => 'Type',
        self::TypeAlias => 'TypeAlias',
        self::TypeClass => 'TypeClass',
        self::TypeClassMethod => 'TypeClassMethod',
        self::TypeFamily => 'TypeFamily',
        self::TypeParameter => 'TypeParameter',
        self::Union => 'Union',
        self::Value => 'Value',
        self::Variable => 'Variable',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            $pbconst =  __CLASS__. '::PB' . strtoupper($name);
            if (!defined($pbconst)) {
                throw new UnexpectedValueException(sprintf(
                        'Enum %s has no value defined for name %s', __CLASS__, $name));
            }
            return constant($pbconst);
        }
        return constant($const);
    }
}

