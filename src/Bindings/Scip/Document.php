<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: scip.proto

namespace Scip;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Document defines the metadata about a source file on disk.
 *
 * Generated from protobuf message <code>scip.Document</code>
 */
class Document extends \Google\Protobuf\Internal\Message
{
    /**
     * The string ID for the programming language this file is written in.
     * The `Language` enum contains the names of most common programming languages.
     * This field is typed as a string to permit any programming langauge, including
     * ones that are not specified by the `Language` enum.
     *
     * Generated from protobuf field <code>string language = 4;</code>
     */
    protected $language = '';
    /**
     * (Required) Unique path to the text document.
     * 1. The path must be relative to the directory supplied in the associated
     *    `Metadata.project_root`.
     * 2. The path must not begin with a leading '/'.
     * 3. The path must point to a regular file, not a symbolic link.
     * 4. The path must use '/' as the separator, including on Windows.
     * 5. The path must be canonical; it cannot include empty components ('//'),
     *    or '.' or '..'.
     *
     * Generated from protobuf field <code>string relative_path = 1;</code>
     */
    protected $relative_path = '';
    /**
     * Occurrences that appear in this file.
     *
     * Generated from protobuf field <code>repeated .scip.Occurrence occurrences = 2;</code>
     */
    private $occurrences;
    /**
     * Symbols that are "defined" within this document.
     * This should include symbols which technically do not have any definition,
     * but have a reference and are defined by some other symbol (see
     * Relationship.is_definition).
     *
     * Generated from protobuf field <code>repeated .scip.SymbolInformation symbols = 3;</code>
     */
    private $symbols;
    /**
     * (optional) Text contents of the this document. Indexers are not expected to
     * include the text by default. It's preferrable that clients read the text
     * contents from the file system by resolving the absolute path from joining
     * `Index.metadata.project_root` and `Document.relative_path`. This field was
     * introduced to support `SymbolInformation.signature_documentation`, but it
     * can be used for other purposes as well, for example testing or when working
     * with virtual/in-memory documents.
     *
     * Generated from protobuf field <code>string text = 5;</code>
     */
    protected $text = '';

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $language
     *           The string ID for the programming language this file is written in.
     *           The `Language` enum contains the names of most common programming languages.
     *           This field is typed as a string to permit any programming langauge, including
     *           ones that are not specified by the `Language` enum.
     *     @type string $relative_path
     *           (Required) Unique path to the text document.
     *           1. The path must be relative to the directory supplied in the associated
     *              `Metadata.project_root`.
     *           2. The path must not begin with a leading '/'.
     *           3. The path must point to a regular file, not a symbolic link.
     *           4. The path must use '/' as the separator, including on Windows.
     *           5. The path must be canonical; it cannot include empty components ('//'),
     *              or '.' or '..'.
     *     @type array<\Scip\Occurrence>|\Google\Protobuf\Internal\RepeatedField $occurrences
     *           Occurrences that appear in this file.
     *     @type array<\Scip\SymbolInformation>|\Google\Protobuf\Internal\RepeatedField $symbols
     *           Symbols that are "defined" within this document.
     *           This should include symbols which technically do not have any definition,
     *           but have a reference and are defined by some other symbol (see
     *           Relationship.is_definition).
     *     @type string $text
     *           (optional) Text contents of the this document. Indexers are not expected to
     *           include the text by default. It's preferrable that clients read the text
     *           contents from the file system by resolving the absolute path from joining
     *           `Index.metadata.project_root` and `Document.relative_path`. This field was
     *           introduced to support `SymbolInformation.signature_documentation`, but it
     *           can be used for other purposes as well, for example testing or when working
     *           with virtual/in-memory documents.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Scip::initOnce();
        parent::__construct($data);
    }

    /**
     * The string ID for the programming language this file is written in.
     * The `Language` enum contains the names of most common programming languages.
     * This field is typed as a string to permit any programming langauge, including
     * ones that are not specified by the `Language` enum.
     *
     * Generated from protobuf field <code>string language = 4;</code>
     * @return string
     */
    public function getLanguage()
    {
        return $this->language;
    }

    /**
     * The string ID for the programming language this file is written in.
     * The `Language` enum contains the names of most common programming languages.
     * This field is typed as a string to permit any programming langauge, including
     * ones that are not specified by the `Language` enum.
     *
     * Generated from protobuf field <code>string language = 4;</code>
     * @param string $var
     * @return $this
     */
    public function setLanguage($var)
    {
        GPBUtil::checkString($var, True);
        $this->language = $var;

        return $this;
    }

    /**
     * (Required) Unique path to the text document.
     * 1. The path must be relative to the directory supplied in the associated
     *    `Metadata.project_root`.
     * 2. The path must not begin with a leading '/'.
     * 3. The path must point to a regular file, not a symbolic link.
     * 4. The path must use '/' as the separator, including on Windows.
     * 5. The path must be canonical; it cannot include empty components ('//'),
     *    or '.' or '..'.
     *
     * Generated from protobuf field <code>string relative_path = 1;</code>
     * @return string
     */
    public function getRelativePath()
    {
        return $this->relative_path;
    }

    /**
     * (Required) Unique path to the text document.
     * 1. The path must be relative to the directory supplied in the associated
     *    `Metadata.project_root`.
     * 2. The path must not begin with a leading '/'.
     * 3. The path must point to a regular file, not a symbolic link.
     * 4. The path must use '/' as the separator, including on Windows.
     * 5. The path must be canonical; it cannot include empty components ('//'),
     *    or '.' or '..'.
     *
     * Generated from protobuf field <code>string relative_path = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setRelativePath($var)
    {
        GPBUtil::checkString($var, True);
        $this->relative_path = $var;

        return $this;
    }

    /**
     * Occurrences that appear in this file.
     *
     * Generated from protobuf field <code>repeated .scip.Occurrence occurrences = 2;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getOccurrences()
    {
        return $this->occurrences;
    }

    /**
     * Occurrences that appear in this file.
     *
     * Generated from protobuf field <code>repeated .scip.Occurrence occurrences = 2;</code>
     * @param array<\Scip\Occurrence>|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setOccurrences($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Scip\Occurrence::class);
        $this->occurrences = $arr;

        return $this;
    }

    /**
     * Symbols that are "defined" within this document.
     * This should include symbols which technically do not have any definition,
     * but have a reference and are defined by some other symbol (see
     * Relationship.is_definition).
     *
     * Generated from protobuf field <code>repeated .scip.SymbolInformation symbols = 3;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getSymbols()
    {
        return $this->symbols;
    }

    /**
     * Symbols that are "defined" within this document.
     * This should include symbols which technically do not have any definition,
     * but have a reference and are defined by some other symbol (see
     * Relationship.is_definition).
     *
     * Generated from protobuf field <code>repeated .scip.SymbolInformation symbols = 3;</code>
     * @param array<\Scip\SymbolInformation>|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setSymbols($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Scip\SymbolInformation::class);
        $this->symbols = $arr;

        return $this;
    }

    /**
     * (optional) Text contents of the this document. Indexers are not expected to
     * include the text by default. It's preferrable that clients read the text
     * contents from the file system by resolving the absolute path from joining
     * `Index.metadata.project_root` and `Document.relative_path`. This field was
     * introduced to support `SymbolInformation.signature_documentation`, but it
     * can be used for other purposes as well, for example testing or when working
     * with virtual/in-memory documents.
     *
     * Generated from protobuf field <code>string text = 5;</code>
     * @return string
     */
    public function getText()
    {
        return $this->text;
    }

    /**
     * (optional) Text contents of the this document. Indexers are not expected to
     * include the text by default. It's preferrable that clients read the text
     * contents from the file system by resolving the absolute path from joining
     * `Index.metadata.project_root` and `Document.relative_path`. This field was
     * introduced to support `SymbolInformation.signature_documentation`, but it
     * can be used for other purposes as well, for example testing or when working
     * with virtual/in-memory documents.
     *
     * Generated from protobuf field <code>string text = 5;</code>
     * @param string $var
     * @return $this
     */
    public function setText($var)
    {
        GPBUtil::checkString($var, True);
        $this->text = $var;

        return $this;
    }

}

