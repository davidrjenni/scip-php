<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: scip.proto

namespace Scip;

use UnexpectedValueException;

/**
 * Protobuf type <code>scip.SyntaxKind</code>
 */
class SyntaxKind
{
    /**
     * Generated from protobuf enum <code>UnspecifiedSyntaxKind = 0;</code>
     */
    const UnspecifiedSyntaxKind = 0;
    /**
     * Comment, including comment markers and text
     *
     * Generated from protobuf enum <code>Comment = 1;</code>
     */
    const Comment = 1;
    /**
     * `;` `.` `,`
     *
     * Generated from protobuf enum <code>PunctuationDelimiter = 2;</code>
     */
    const PunctuationDelimiter = 2;
    /**
     * (), {}, [] when used syntactically
     *
     * Generated from protobuf enum <code>PunctuationBracket = 3;</code>
     */
    const PunctuationBracket = 3;
    /**
     * `if`, `else`, `return`, `class`, etc.
     *
     * Generated from protobuf enum <code>Keyword = 4;</code>
     */
    const Keyword = 4;
    /**
     * Generated from protobuf enum <code>IdentifierKeyword = 4 [deprecated = true];</code>
     */
    const IdentifierKeyword = 4;
    /**
     * `+`, `*`, etc.
     *
     * Generated from protobuf enum <code>IdentifierOperator = 5;</code>
     */
    const IdentifierOperator = 5;
    /**
     * non-specific catch-all for any identifier not better described elsewhere
     *
     * Generated from protobuf enum <code>Identifier = 6;</code>
     */
    const Identifier = 6;
    /**
     * Identifiers builtin to the language: `min`, `print` in Python.
     *
     * Generated from protobuf enum <code>IdentifierBuiltin = 7;</code>
     */
    const IdentifierBuiltin = 7;
    /**
     * Identifiers representing `null`-like values: `None` in Python, `nil` in Go.
     *
     * Generated from protobuf enum <code>IdentifierNull = 8;</code>
     */
    const IdentifierNull = 8;
    /**
     * `xyz` in `const xyz = "hello"`
     *
     * Generated from protobuf enum <code>IdentifierConstant = 9;</code>
     */
    const IdentifierConstant = 9;
    /**
     * `var X = "hello"` in Go
     *
     * Generated from protobuf enum <code>IdentifierMutableGlobal = 10;</code>
     */
    const IdentifierMutableGlobal = 10;
    /**
     * Parameter definition and references
     *
     * Generated from protobuf enum <code>IdentifierParameter = 11;</code>
     */
    const IdentifierParameter = 11;
    /**
     * Identifiers for variable definitions and references within a local scope
     *
     * Generated from protobuf enum <code>IdentifierLocal = 12;</code>
     */
    const IdentifierLocal = 12;
    /**
     * Identifiers that shadow other identifiers in an outer scope
     *
     * Generated from protobuf enum <code>IdentifierShadowed = 13;</code>
     */
    const IdentifierShadowed = 13;
    /**
     * Identifier representing a unit of code abstraction and/or namespacing.
     * NOTE: This corresponds to a package in Go and JVM languages,
     * and a module in languages like Python and JavaScript.
     *
     * Generated from protobuf enum <code>IdentifierNamespace = 14;</code>
     */
    const IdentifierNamespace = 14;
    /**
     * Generated from protobuf enum <code>IdentifierModule = 14 [deprecated = true];</code>
     */
    const IdentifierModule = 14;
    /**
     * Function references, including calls
     *
     * Generated from protobuf enum <code>IdentifierFunction = 15;</code>
     */
    const IdentifierFunction = 15;
    /**
     * Function definition only
     *
     * Generated from protobuf enum <code>IdentifierFunctionDefinition = 16;</code>
     */
    const IdentifierFunctionDefinition = 16;
    /**
     * Macro references, including invocations
     *
     * Generated from protobuf enum <code>IdentifierMacro = 17;</code>
     */
    const IdentifierMacro = 17;
    /**
     * Macro definition only
     *
     * Generated from protobuf enum <code>IdentifierMacroDefinition = 18;</code>
     */
    const IdentifierMacroDefinition = 18;
    /**
     * non-builtin types
     *
     * Generated from protobuf enum <code>IdentifierType = 19;</code>
     */
    const IdentifierType = 19;
    /**
     * builtin types only, such as `str` for Python or `int` in Go
     *
     * Generated from protobuf enum <code>IdentifierBuiltinType = 20;</code>
     */
    const IdentifierBuiltinType = 20;
    /**
     * Python decorators, c-like __attribute__
     *
     * Generated from protobuf enum <code>IdentifierAttribute = 21;</code>
     */
    const IdentifierAttribute = 21;
    /**
     * `\b`
     *
     * Generated from protobuf enum <code>RegexEscape = 22;</code>
     */
    const RegexEscape = 22;
    /**
     * `*`, `+`
     *
     * Generated from protobuf enum <code>RegexRepeated = 23;</code>
     */
    const RegexRepeated = 23;
    /**
     * `.`
     *
     * Generated from protobuf enum <code>RegexWildcard = 24;</code>
     */
    const RegexWildcard = 24;
    /**
     * `(`, `)`, `[`, `]`
     *
     * Generated from protobuf enum <code>RegexDelimiter = 25;</code>
     */
    const RegexDelimiter = 25;
    /**
     * `|`, `-`
     *
     * Generated from protobuf enum <code>RegexJoin = 26;</code>
     */
    const RegexJoin = 26;
    /**
     * Literal strings: "Hello, world!"
     *
     * Generated from protobuf enum <code>StringLiteral = 27;</code>
     */
    const StringLiteral = 27;
    /**
     * non-regex escapes: "\t", "\n"
     *
     * Generated from protobuf enum <code>StringLiteralEscape = 28;</code>
     */
    const StringLiteralEscape = 28;
    /**
     * datetimes within strings, special words within a string, `{}` in format strings
     *
     * Generated from protobuf enum <code>StringLiteralSpecial = 29;</code>
     */
    const StringLiteralSpecial = 29;
    /**
     * "key" in { "key": "value" }, useful for example in JSON
     *
     * Generated from protobuf enum <code>StringLiteralKey = 30;</code>
     */
    const StringLiteralKey = 30;
    /**
     * 'c' or similar, in languages that differentiate strings and characters
     *
     * Generated from protobuf enum <code>CharacterLiteral = 31;</code>
     */
    const CharacterLiteral = 31;
    /**
     * Literal numbers, both floats and integers
     *
     * Generated from protobuf enum <code>NumericLiteral = 32;</code>
     */
    const NumericLiteral = 32;
    /**
     * `true`, `false`
     *
     * Generated from protobuf enum <code>BooleanLiteral = 33;</code>
     */
    const BooleanLiteral = 33;
    /**
     * Used for XML-like tags
     *
     * Generated from protobuf enum <code>Tag = 34;</code>
     */
    const Tag = 34;
    /**
     * Attribute name in XML-like tags
     *
     * Generated from protobuf enum <code>TagAttribute = 35;</code>
     */
    const TagAttribute = 35;
    /**
     * Delimiters for XML-like tags
     *
     * Generated from protobuf enum <code>TagDelimiter = 36;</code>
     */
    const TagDelimiter = 36;

    private static $valueToName = [
        self::UnspecifiedSyntaxKind => 'UnspecifiedSyntaxKind',
        self::Comment => 'Comment',
        self::PunctuationDelimiter => 'PunctuationDelimiter',
        self::PunctuationBracket => 'PunctuationBracket',
        self::Keyword => 'Keyword',
        self::IdentifierKeyword => 'IdentifierKeyword',
        self::IdentifierOperator => 'IdentifierOperator',
        self::Identifier => 'Identifier',
        self::IdentifierBuiltin => 'IdentifierBuiltin',
        self::IdentifierNull => 'IdentifierNull',
        self::IdentifierConstant => 'IdentifierConstant',
        self::IdentifierMutableGlobal => 'IdentifierMutableGlobal',
        self::IdentifierParameter => 'IdentifierParameter',
        self::IdentifierLocal => 'IdentifierLocal',
        self::IdentifierShadowed => 'IdentifierShadowed',
        self::IdentifierNamespace => 'IdentifierNamespace',
        self::IdentifierModule => 'IdentifierModule',
        self::IdentifierFunction => 'IdentifierFunction',
        self::IdentifierFunctionDefinition => 'IdentifierFunctionDefinition',
        self::IdentifierMacro => 'IdentifierMacro',
        self::IdentifierMacroDefinition => 'IdentifierMacroDefinition',
        self::IdentifierType => 'IdentifierType',
        self::IdentifierBuiltinType => 'IdentifierBuiltinType',
        self::IdentifierAttribute => 'IdentifierAttribute',
        self::RegexEscape => 'RegexEscape',
        self::RegexRepeated => 'RegexRepeated',
        self::RegexWildcard => 'RegexWildcard',
        self::RegexDelimiter => 'RegexDelimiter',
        self::RegexJoin => 'RegexJoin',
        self::StringLiteral => 'StringLiteral',
        self::StringLiteralEscape => 'StringLiteralEscape',
        self::StringLiteralSpecial => 'StringLiteralSpecial',
        self::StringLiteralKey => 'StringLiteralKey',
        self::CharacterLiteral => 'CharacterLiteral',
        self::NumericLiteral => 'NumericLiteral',
        self::BooleanLiteral => 'BooleanLiteral',
        self::Tag => 'Tag',
        self::TagAttribute => 'TagAttribute',
        self::TagDelimiter => 'TagDelimiter',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

